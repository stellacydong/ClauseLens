"""
load_data.py

Utility functions for loading KPI data, simulation results, and aggregated dashboard metrics
for the Transparent Market Platform (MAPPO + MarketLens + Governance).
"""

import os
import pandas as pd

# -----------------------------------------------------------------------------
# Paths
# -----------------------------------------------------------------------------
APP_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
DATA_PROCESSED_DIR = os.path.join(APP_DIR, "..", "data", "processed")

# Files generated by 03_run_simulation.py and 04_generate_dashboard_data.py
SIMULATION_RESULTS_PATH = os.path.join(DATA_PROCESSED_DIR, "simulation_results.parquet")
DASHBOARD_DATA_PATH = os.path.join(DATA_PROCESSED_DIR, "dashboard_data.parquet")


# -----------------------------------------------------------------------------
# Load Simulation Results (Episode-Level KPIs)
# -----------------------------------------------------------------------------
def load_simulation_results() -> pd.DataFrame:
    """
    Load episode-level KPIs from MAPPO simulations.

    Returns:
        pd.DataFrame with columns:
            ["round", "avg_profit", "win_rate", "cvar_95", "timestamp"]
        Empty DataFrame if file does not exist.
    """
    if os.path.exists(SIMULATION_RESULTS_PATH):
        return pd.read_parquet(SIMULATION_RESULTS_PATH)
    else:
        return pd.DataFrame(columns=["round", "avg_profit", "win_rate", "cvar_95", "timestamp"])


# -----------------------------------------------------------------------------
# Load Aggregated Dashboard KPIs (MarketLens + Simulation)
# -----------------------------------------------------------------------------
def load_dashboard_kpis() -> pd.DataFrame:
    """
    Load aggregated KPIs for the executive dashboard (MarketLens + MAPPO).

    Returns:
        pd.DataFrame with columns like:
            ["timestamp", "avg_profit", "win_rate", "cvar_95",
             "avg_pred_acceptance", "avg_pred_loss_ratio",
             "portfolio_size", "fairness_score"]
        Empty DataFrame if file does not exist.
    """
    if os.path.exists(DASHBOARD_DATA_PATH):
        return pd.read_parquet(DASHBOARD_DATA_PATH)
    else:
        return pd.DataFrame(
            columns=[
                "timestamp", "avg_profit", "win_rate", "cvar_95",
                "avg_pred_acceptance", "avg_pred_loss_ratio",
                "portfolio_size", "fairness_score"
            ]
        )


# -----------------------------------------------------------------------------
# Alias for compatibility with old imports
# -----------------------------------------------------------------------------
def load_kpis() -> pd.DataFrame:
    """
    Alias for `load_dashboard_kpis()` to maintain compatibility
    with previous tab files that imported `load_kpis`.
    """
    return load_dashboard_kpis()
